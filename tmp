

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Finance App</title>
    <!-- Basic PWA Manifest for "Add to Home Screen" functionality -->
    <link rel="manifest" href="data:application/json,{
        &quot;short_name&quot;: &quot;Finance&quot;,
        &quot;name&quot;: &quot;My Finance App&quot;,
        &quot;start_url&quot;: &quot;.&quot;,
        &quot;display&quot;: &quot;standalone&quot;,
        &quot;theme_color&quot;: &quot;#ffffff&quot;,
        &quot;background_color&quot;: &quot;#f0f2f5&quot;
    }">
    <style>
        /* Basic CSS styling for an app-like feel */
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 0; background-color: #f0f2f5; }
        #root { height: 100vh; display: flex; flex-direction: column; }
        .container { flex: 1; display: flex; flex-direction: column; }
        .header { display: flex; justify-content: space-between; align-items: center; padding: 20px 20px 10px 20px; }
        .title { font-size: 28px; font-weight: bold; }
        .refresh-button { font-size: 24px; cursor: pointer; }
        .account-list { flex-grow: 1; overflow-y: auto; }
        .account-item { background-color: white; padding: 15px; margin: 8px 16px; border-radius: 8px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 1px 2px rgba(0,0,0,0.1); }
        .account-name { font-size: 16px; font-weight: 600; }
        .account-subtype { font-size: 14px; color: #666; }
        .account-balance { font-size: 16px; font-weight: bold; }
        .empty-text, .error-text { text-align: center; margin-top: 50px; color: #888; }
        .error-text { color: red; }
        .button-container { padding: 20px; border-top: 1px solid #ddd; background-color: #f8f9fa; }
        .button-container button { width: 100%; padding: 15px; font-size: 16px; font-weight: bold; color: white; background-color: #007bff; border: none; border-radius: 8px; cursor: pointer; }
        .loader { text-align: center; margin-top: 50px; }
    </style>
</head>
<body>
    <div id="root"></div>

    <!-- React and ReactDOM scripts -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <!-- Babel script to transpile JSX in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <!-- Supabase Client script -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- Plaid Link for Web script -->
    <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>

    <script type="text/babel">
        const { createClient } = supabase;
        const { useState, useEffect, useCallback } = React;

        // --- IMPORTANT: Paste your Supabase URL and Anon Key here ---
        const SUPABASE_URL = 'https://mletimaujleeqmnyqrgv.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1sZXRpbWF1amxlZXFtbnlxcmd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAyODM4OTIsImV4cCI6MjA3NTg1OTg5Mn0.NvSLc8rlCfaVOEhPMKZ402cnSh-wm9726Qi8t_w3lfM';
    
        const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        function App() {
            const [accounts, setAccounts] = useState([]);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);

            const syncData = useCallback(async () => {
                setLoading(true);
                setError(null);
                try {
                    const { data, error: invokeError } = await supabaseClient.functions.invoke('get-accounts-and-sync');
                    if (invokeError) throw invokeError;
                    if (data.error) throw new Error(data.error);
                    setAccounts(data);
                } catch (e) {
                    setError(`Syncing Data Error: ${e.message}`);
                } finally {
                    setLoading(false);
                }
            }, []);
            
            useEffect(() => {
                syncData();
            }, [syncData]);

            const openPlaidLink = async () => {
                setError(null);
                try {
                    const { data, error: invokeError } = await supabaseClient.functions.invoke('create-link-token');
                    if (invokeError) throw invokeError;
                    const linkToken = data.link_token;

                    const handler = Plaid.create({
                        token: linkToken,
                        onSuccess: async (public_token, metadata) => {
                            try {
                                await supabaseClient.functions.invoke('set-access-token', {
                                    body: { public_token },
                                });
                                syncData(); // Refresh data after successful link
                            } catch (e) {
                                setError(`Error setting access token: ${e.message}`);
                            }
                        },
                        onExit: (err, metadata) => {
                            if (err != null) {
                                console.log('Plaid Link exited with error:', err);
                            }
                        },
                    });
                    handler.open();
                } catch (e) {
                    setError(`Error creating link token: ${e.message}`);
                }
            };
            
            return (
                <div className="container">
                    <div className="header">
                        <h1 className="title">Accounts</h1>
                        <div className="refresh-button" onClick={syncData}>ðŸ”„</div>
                    </div>
                    
                    <div className="account-list">
                        {loading && <div className="loader">Loading...</div>}
                        {error && <div className="error-text">{error}</div>}
                        {!loading && !error && accounts.length === 0 && <div className="empty-text">No accounts linked yet.</div>}
                        {!loading && accounts.map(item => (
                            <div key={item.plaid_account_id} className="account-item">
                                <div>
                                    <div className="account-name">{item.name}</div>
                                    <div className="account-subtype">{item.subtype}</div>
                                </div>
                                <div className="account-balance">${item.current_balance.toFixed(2)}</div>
                            </div>
                        ))}
                    </div>

                    <div className="button-container">
                        <button onClick={openPlaidLink}>Connect a Bank</button>
                    </div>
                </div>
            );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>

